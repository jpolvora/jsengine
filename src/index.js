const path = require('path')
const { EventEmitter } = require('events')
const minify = require('html-minifier').minify
const logger = require('debug')('JSENGINE:main')
const util = require('util')
const memoize = require('fast-memoize')
const View = require('./view')
const helpers = require('./helpers')

logger.log = console.log.bind(console)
logger.error = console.error.bind(console)

const getMinifyOptions = dev => ({
  collapseBooleanAttributes: true,
  collapseInlineTagWhitespace: true,
  collapseWhitespace: !dev,
  includeAutoGeneratedTags: !dev,
  removeComments: !dev,
  removeOptionalTags: !dev,
  removeEmptyAttributes: !dev,
  removeRedundantAttributes: !dev
})

class JsEngine extends EventEmitter {
  constructor (opts) {
    super()
    const isDevelopment = process.env.NODE_ENV === 'development'

    this.options = Object.assign(
      {
        assets: '/assets',
        isDevelopment: isDevelopment,
        cache: !isDevelopment,
        minify: true,
        printComments: isDevelopment,
        helpers: helpers,
        formatLang: { lang: 'pt-BR', currency: 'BRL' },
        views: path.join(path.dirname(process.mainModule.filename), 'views')
      },
      opts
    )
    this.__express = this.render.bind(this)
    this.__cachedRender = memoize(this.render).bind(this)

    const app = this.options.app || false
    if (app) {
      app.engine('js', this.__express)
      app.set('views', this.options.views)
      app.set('view engine', 'js')
    }

    logger('JsEngine instance created with options: %O ', this.options)
  }

  render (moduleOrFullPath, model, callback) {
    logger('Start rendering: ' + moduleOrFullPath)
    this.emit('render', { moduleOrFullPath, model })

    let html = ''

    let error

    const hrstart = process.hrtime()

    try {
      const view = new View(moduleOrFullPath, model, 'view', this.options)
      html = view.execute()

      if (this.options.minify) {
        html = minify(html, getMinifyOptions(this.options.isDevelopment))
      }
    } catch (e) {
      logger('render error: %o', e)
      error = e
    } finally {
      const hrend = process.hrtime(hrstart)
      const end = util.format('Execution time (hr): %ds %dms', hrend[0], hrend[1] / 1000000)
      logger('End rendering [%s] %s', moduleOrFullPath, end)
      this.emit('rendered', { end, html, error })
      if (typeof callback === 'function') return callback(error, html)
      return error || html
    }
  }
}

module.exports = JsEngine
